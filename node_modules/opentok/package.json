{
  "name": "opentok",
  "description": "OpenTok server-side SDK",
  "version": "2.2.4",
  "homepage": "http://opentok.github.io/opentok-node",
  "repository": {
    "type": "git",
    "url": "https://github.com/opentok/opentok-node.git"
  },
  "bugs": {
    "url": "https://github.com/opentok/opentok-node/issues",
    "email": "support@tokbox.com"
  },
  "license": "MIT",
  "contributors": [
    {
      "name": "Brian Stoner",
      "email": "bsstoner@gmail.com",
      "url": "http://brianstoner.com"
    },
    {
      "name": "Song Zheng",
      "email": "song@tokbox.com",
      "url": "http://songz.me"
    },
    {
      "name": "Ankur Oberoi",
      "email": "aoberoi@gmail.com",
      "url": "http://aoberoi.me"
    }
  ],
  "main": "lib/opentok.js",
  "scripts": {
    "test": "grunt"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "devDependencies": {
    "async": "^0.2.10",
    "chai": "^1.9.1",
    "grunt": "^0.4.4",
    "grunt-jasmine-node": "^0.2.1",
    "grunt-jsdoc": "^0.5.4",
    "grunt-mocha-test": "^0.10.0",
    "nock": "^0.42.1"
  },
  "dependencies": {
    "xmljson": "~0.2.0",
    "underscore": "~1.5.2",
    "request": "^2.34.0",
    "lodash": "^2.4.1"
  },
  "readme": "# OpenTok Node SDK\n\n[![Build Status](https://travis-ci.org/opentok/opentok-node.png)](https://travis-ci.org/opentok/opentok-node)\n\nThe OpenTok Node SDK lets you generate\n[sessions](http://www.tokbox.com/opentok/tutorials/create-session/) and\n[tokens](http://www.tokbox.com/opentok/tutorials/create-token/) for\n[OpenTok](http://www.tokbox.com/) applications, and\n[archive](http://www.tokbox.com/platform/archiving) OpenTok 2.0 sessions.\n\nIf you are updating from a previous version of this SDK, see\n[Important changes since v2.2](#important-changes-since-v220).\n\n# Installation using npm (recommended):\n\nnpm helps manage dependencies for node projects. Find more info here: <http://npmjs.org>\n\nRun this command to install the package and adding it to your `package.json`:\n\n```\n$ npm install opentok --save\n```\n\n# Usage\n\n## Initializing\n\nImport the module to get a constructor function for an OpenTok object, then call it with `new` to\ninitantiate it with your own API Key and API Secret.\n\n```javascript\nvar OpenTok = require('opentok'),\n    opentok = new OpenTok(apiKey, apiSecret);\n```\n\n## Creating Sessions\n\nTo create an OpenTok Session, use the `opentok.createSession(properties, callback)` method. The\n`properties` parameter is an optional object used to specify whether the session uses the OpenTok\nMedia Router and to specify a location hint. The callback has the signature\n`function(error, session)`. The `session` returned in the callback is an instance of Session.\nSession objects have a `sessionId` property that is useful to be saved to a persistent store\n(such as a database).\n\n```javascript\n// Create a session that will attempt to transmit streams directly between\n// clients. If clients cannot connect, the session uses the OpenTok TURN server:\nopentok.createSession(function(err, session) {\n  if (err) return console.log(err);\n\n  // save the sessionId\n  db.save('session', session.sessionId, done);\n});\n\n// The session will the OpenTok Media Router:\nopentok.createSession({mediaMode:\"routed\"}, function(err, session) {\n  if (err) return console.log(err);\n\n  // save the sessionId\n  db.save('session', session.sessionId, done);\n});\n\n// A Session with a location hint\nopentok.createSession({location:'12.34.56.78'}, function(err, session) {\n  if (err) return console.log(err);\n\n  // save the sessionId\n  db.save('session', session.sessionId, done);\n});\n```\n## Generating Tokens\n\nOnce a Session is created, you can start generating Tokens for clients to use when connecting to it.\nYou can generate a token by calling the `opentok.generateToken(sessionId, options)` method. Another\nway is to call the `session.generateToken(options)` method of a Session object. The `options`\nparameter is an optional object used to set the role, expire time, and connection data of the Token.\n\n```javascript\n// Generate a Token from just a sessionId (fetched from a database)\ntoken = opentok.generateToken(sessionId);\n\n// Genrate a Token from a session object (returned from createSession)\ntoken = session.generateToken();\n\n// Set some options in a Token\ntoken = session.generateToken({\n  role :       'moderator',\n  expireTime : (new Date().getTime() / 1000)+(7 * 24 * 60 * 60), // in one week\n  data :       'name=Johnny'\n});\n```\n\n## Working with archives\n\nYou can start the recording of an OpenTok Session using the `opentok.startArchive(sessionId,\noptions, callback)` method. The `options` parameter is an optional object used to set the name of\nthe Archive. The callback has the signature `function(err, archive)`. The `archive` returned in\nthe callback is an instance of `Archive`. Note that you can only start an archive on a Session with\nconnected clients.\n\n```javascript\nopentok.startArchive(sessionId, { name: 'Important Presentation' }, function(err, archive) {\n  if (err) return console.log(err);\n\n  // The id property is useful to save off into a database\n  console.log(\"new archive:\" + archive.id);\n});\n```\n\nYou can stop the recording of a started Archive using the `opentok.stopArchive(archiveId, callback)`\nmethod. You can also do this using the `archive.stop(callback)` method an `Archive` instance. The\ncallback has a signature `function(err, archive)`. The `archive` returned in the callback is an\ninstance of `Archive`.\n\n```javascript\nopentok.stopArchive(archiveId, function(err, archive) {\n  if (err) return console.log(err);\n\n  console.log(\"Stopped archive:\" + archive.id);\n});\n\narchive.stop(function(err, archive) {\n  if (err) return console.log(err);\n});\n```\n\nTo get an `Archive` instance (and all the information about it) from an `archiveId`, use the\n`opentok.getArchive(archiveId, callback)` method. The callback has a function signature\n`function(err, archive)`. You can inspect the properties of the archive for more details.\n\n```javascript\nopentok.getArchive(archiveId, function(err, archive) {\n  if (err) return console.log(err);\n\n  console.log(archive);\n});\n```\n\nTo delete an Archive, you can call the `opentok.deleteArchive(archiveId, callback)` method or the\n`delete(callback)` method of an `Archive` instance. The callback has a signature `function(err)`.\n\n```javascript\n// Delete an Archive from an archiveId (fetched from database)\nopentok.deleteArchive(archiveId, function(err) {\n  if (err) console.log(err);\n});\n\n// Delete an Archive from an Archive instance (returned from archives.create, archives.find)\narchive.delete(function(err) {\n  if (err) console.log(err);\n});\n```\n\nYou can also get a list of all the Archives you've created (up to 1000) with your API Key. This is\ndone using the `opentok.listArchives(options, callback)` method. The parameter `options` is an\noptional object used to specify an `offset` and `count` to help you paginate through the results.\nThe callback has a signature `function(err, archives, totalCount)`. The `archives` returned from\nthe callback is an array of `Archive` instances. The `totalCount` returned from the callback is\nthe total number of archives your API Key has generated.\n\n```javascript\nopentok.listArchives({offset:100, count:50}, function(error, archives, totalCount) {\n  if (error) return console.log(\"error:\", error);\n\n  console.log(totalCount + \" archives\");\n  for (var i = 0; i < archives.length; i++) {\n    console.log(archives[i].id);\n  }\n});\n```\n\n# Samples\n\nThere are two sample applications included in this repository. To get going as fast as possible, clone the whole\nrepository and follow the Walkthroughs:\n\n*  [HelloWorld](sample/HelloWorld/README.md)\n*  [Archiving](sample/Archiving/README.md)\n\n# Documentation\n\nReference documentation is available at <http://www.tokbox.com/opentok/libraries/server/node/reference/index.html> and in the\ndocs directory of the SDK.\n\n# Requirements\n\nYou need an OpenTok API key and API secret, which you can obtain at <https://dashboard.tokbox.com>.\n\nThe OpenTok Node SDK requires node 0.10 or higher.\n\n# Release Notes\n\nSee the [Releases](https://github.com/opentok/opentok-node/releases) page for details\nabout each release.\n\n## Important changes since v2.2.0\n\n**Changes in v2.2.3:**\n\nThe default setting for the `createSession()` method is to create a session with the media mode set\nto relayed. In previous versions of the SDK, the default setting was to use the OpenTok Media Router\n(media mode set to routed). In a relayed session, clients will attempt to send streams directly\nbetween each other (peer-to-peer); if clients cannot connect due to firewall restrictions, the\nsession uses the OpenTok TURN server to relay audio-video streams.\n\n**Changes in v2.2.0:**\n\nThis version of the SDK includes support for working with OpenTok 2.0 archives. (This API does not\nwork with OpenTok 1.0 archives.)\n\nThe `createSession()` method has changed to take one parameter: an `options` object that has `location`\nand `mediaMode` properties. The `mediaMode` property replaces the `properties.p2p.preference`\nparameter in the previous version of the SDK.\n\nThe `generateToken()` has changed to take two parameters: the session ID and an `options` object that has `role`, `expireTime` and `data` properties.\n\nSee the reference documentation\n<http://www.tokbox.com/opentok/libraries/server/node/reference/index.html> and in the\ndocs directory of the SDK.\n\n\n# Development and Contributing\n\nInterested in contributing? We :heart: pull requests! See the [Development](DEVELOPING.md) and\n[Contribution](CONTRIBUTING.md) guidelines.\n\n# Support\n\nSee <http://tokbox.com/opentok/support/> for all our support options.\n\nFind a bug? File it on the [Issues](https://github.com/opentok/opentok-node/issues) page. Hint:\ntest cases are really helpful!\n",
  "readmeFilename": "README.md",
  "_id": "opentok@2.2.4",
  "dist": {
    "shasum": "8d3b452d1d30956d4c11332aca351cb2c9c3997d"
  },
  "_from": "opentok@>2.2.3",
  "_resolved": "https://registry.npmjs.org/opentok/-/opentok-2.2.4.tgz"
}
